
# test park panel with mean
park.panel.mean <- 
  street_park_grid %>%
  st_drop_geometry() %>% 
  mutate(Park_Counter = 1) %>%
  right_join(park.panel,by=c("uniqueID","interval15")) %>% 
  group_by(interval15, uniqueID) %>%
  summarize(Real_Count = sum(Park_Counter, na.rm=T)) %>%
  ungroup() %>%
  mutate(week = week(interval15),
         dotw = wday(interval15, label = TRUE)) %>% 
  left_join(meter_net) %>%
  left_join(var_net) %>% 
  mutate(mean = Real_Count/countMeters) %>%
  st_sf() 

park.panel.lag <- 
  park.panel.mean %>% 
  arrange(interval15, uniqueID) %>% 
  mutate(
    lagHour = dplyr::lag(Real_Count,1),
    lag2Hours = dplyr::lag(Real_Count,2),
    lag3Hours = dplyr::lag(Real_Count,3),
    lagDay = dplyr::lag(Real_Count,24)) %>%
  mutate(day = yday(interval15),
         time = (hour(interval15)*60 + minute(interval15))/60,
         log_count = log(Real_Count + 1),
         log_mean = log(mean+ 1))

park.Train <- filter(park.panel.lag, week <= 32)
park.Test <- filter(park.panel.lag, week > 32)

memory.limit(size=50000)   #in case of 'Error: cannot allocate vector of size ... Mb'

linear_reg1 <- 
  lm(mean ~  time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours,  data=park.Train)

poisson_reg1 <-
  glm(mean ~ time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours, family = "poisson", data = park.Train)

linear_reg2 <- 
  lm(Real_Count ~  time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours,  data=park.Train)

poisson_reg2 <-
  glm(Real_Count ~ time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours, family = "poisson", data = park.Train)

linear_reg3 <- 
  lm(log_mean ~  time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours,  data=park.Train)

poisson_reg3 <-
  glm(log_mean ~ time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours, family = "poisson", data = park.Train)

linear_reg4 <- 
  lm(log_count ~  time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours + lagDay,  data=park.Train)

# poisson_reg4 <-
#   glm(log_count ~ time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours, family = "poisson", data = park.Train)

linear_reg5 <- 
  lm(log_count ~  time + dotw + uniqueID + lagHour + lag2Hours +lag3Hours + lagDay 
     + off_parking.nn + countCarshare + Percent_White + Mean_Commute_Time + Percent_Taking_Public_Trans
     + countClean + countFood + countGraffiti + countIncident + countViolation + countRetail
     + pm_district_name + speedlimit + sidewalk_width,
     data=park.Train)

# options(max.print=1000000)
# summary(linear_reg1)
# summary(poisson_reg1)

park.Test.weekNest <- 
  park.Test %>%
  nest(-week) 

model_pred <- function(dat, fit){
  pred <- predict(fit, newdata = dat)}

week_predictions <- 
  park.Test.weekNest %>% 
  mutate(#linear_MEAN = map(.x = data, fit = linear_reg1, .f = model_pred),
         #poisson_MEAN = map(.x = data, fit = poisson_reg1, .f = model_pred),
         #linear_COUNT = map(.x = data, fit = linear_reg2, .f = model_pred),
         #poisson_COUNT = map(.x = data, fit = poisson_reg2, .f = model_pred),
         #linear_logMEAN = map(.x = data, fit = linear_reg3, .f = model_pred),
         #poisson_logMEAN = map(.x = data, fit = poisson_reg3, .f = model_pred),
         linear_logCOUNT = map(.x = data, fit = linear_reg4, .f = model_pred),
         #poisson_logCOUNT = map(.x = data, fit = poisson_reg4, .f = model_pred),
         linear_all = map(.x = data, fit = linear_reg5, .f = model_pred),
         ) %>% 
  gather(Regression, Prediction, -data, -week) %>%
  mutate(Observed = map(data, pull, mean),
         Absolute_Error = map2(Observed, Prediction,  ~ abs(.x - .y)),
         MAE = map_dbl(Absolute_Error, mean, na.rm = TRUE),
         sd_AE = map_dbl(Absolute_Error, sd, na.rm = TRUE))

week_predictions

(predict(linear_reg1, park.Test) - park.Test$Real_Count)/park.Test$Real_Count
abs_error <-
  abs(predict(linear_reg1, park.Test) - park.Test$Real_Count)
mean(abs_error)

mean(park.Test$mean)
mean(park.Test$Real_Count)
mean(park.Test$log_mean)
mean(park.Test$log_count)
  
week_predictions %>%
  dplyr::select(week, Regression, MAE) %>%
  gather(Variable, MAE, -Regression, -week) %>%
  ggplot(aes(week, MAE)) + 
  geom_bar(aes(fill = Regression), position = "dodge", stat="identity") +
  scale_fill_manual(values = palette5) +
  labs(title = "Mean Absolute Errors by model specification and week")

week_predictions %>% 
  mutate(interval15 = map(data, pull, interval15),
         uniqueID = map(data, pull, uniqueID)) %>%
  dplyr::select(interval15, uniqueID, Observed, Prediction, Regression) %>%
  unnest() %>%
  gather(Variable, Value, -Regression, -interval15, -uniqueID) %>%
  group_by(Regression, Variable, interval15) %>%
  summarize(Value = sum(Value)) %>%
  ggplot(aes(interval15, Value, colour=Variable)) + 
  geom_line(size = 1.1) + 
  facet_wrap(~Regression, ncol=1) +
  labs(title = "Predicted/Observed parkings time series", subtitle = "San Francisco; test set of 2 weeks",  x = "Hour", y= "Parkings") 



## Try 60 interval
park.panel_60 <- 
  expand.grid(interval60=unique(street_park_grid$interval60), 
              uniqueID = unique(street_park_grid$uniqueID)) 

park.panel.count_60 <- 
  street_park_grid %>%
  st_drop_geometry() %>% 
  mutate(Park_Counter = 1) %>%
  right_join(park.panel_60,by=c("uniqueID","interval60")) %>% 
  group_by(interval60, uniqueID) %>%
  summarize(Real_Count = sum(Park_Counter, na.rm=T)) %>%
  ungroup() %>%
  mutate(week = week(interval60),
         dotw = wday(interval60, label = TRUE)) %>% 
  left_join(var_net) %>% 
  st_sf()


# add time lag to the panel
park.panel.lag_60 <- 
  park.panel.count_60 %>% 
  arrange(interval60, uniqueID) %>% 
  mutate(
    lagHour = dplyr::lag(Real_Count,1),
    lag2Hours = dplyr::lag(Real_Count,2),
    lag3Hours = dplyr::lag(Real_Count,3),
    lagDay = dplyr::lag(Real_Count,24)) %>%
  mutate(day = yday(interval60),
         log_count = log(Real_Count + 1))

park.Train_60 <- filter(park.panel.lag_60, week <= 32)
park.Test_60 <- filter(park.panel.lag_60, week > 32)

linear_reg7 <- 
  lm(log_count ~  hour(interval60) + dotw + uniqueID + lagHour + lag2Hours +lag3Hours + lagDay,  data=park.Train_60)

linear_reg8 <- 
  lm(log_count ~  hour(interval60) + dotw + uniqueID + lagHour + lag2Hours +lag3Hours + lagDay 
     + off_parking.nn + countCarshare + Percent_White + Mean_Commute_Time + Percent_Taking_Public_Trans
     + countClean + countFood + countGraffiti + countIncident + countViolation + countRetail
     + pm_district_name + speedlimit + sidewalk_width,
     data=park.Train_60)

park.Test.weekNest_60 <- 
  park.Test_60 %>%
  nest(-week) 

model_pred <- function(dat, fit){
  pred <- predict(fit, newdata = dat)}

week_predictions <- 
  park.Test.weekNest_60 %>% 
  mutate(
    #linear_MEAN = map(.x = data, fit = linear_reg1, .f = model_pred),
    #poisson_MEAN = map(.x = data, fit = poisson_reg1, .f = model_pred),
    #linear_COUNT = map(.x = data, fit = linear_reg2, .f = model_pred),
    #poisson_COUNT = map(.x = data, fit = poisson_reg2, .f = model_pred),
    #linear_logMEAN = map(.x = data, fit = linear_reg3, .f = model_pred),
    #poisson_logMEAN = map(.x = data, fit = poisson_reg3, .f = model_pred),
    linear_logCOUNT = map(.x = data, fit = linear_reg7, .f = model_pred),
    #poisson_logCOUNT = map(.x = data, fit = poisson_reg4, .f = model_pred),
    linear_all = map(.x = data, fit = linear_reg8, .f = model_pred),
  ) %>% 
  gather(Regression, Prediction, -data, -week) %>%
  mutate(Observed = map(data, pull, mean),
         Absolute_Error = map2(Observed, Prediction,  ~ abs(.x - .y)),
         MAE = map_dbl(Absolute_Error, mean, na.rm = TRUE),
         sd_AE = map_dbl(Absolute_Error, sd, na.rm = TRUE))

week_predictions



        